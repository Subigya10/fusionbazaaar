import tkinter as tk
from tkinter import font, messagebox, Checkbutton, IntVar
from PIL import Image, ImageTk
import sqlite3

# Set up the database
conn = sqlite3.connect("fusion_bazaarrrrrr.db")
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    
                    first_name TEXT ,
                    last_name TEXT ,
                    phone_number TEXT ,
                    password TEXT ,
                    email TEXT )''')
conn.commit()

# Function to save user details during sign-up
def save_user_details(first_name, last_name, phone_number, password, email):
    # Simple validation
    if not first_name or not last_name or not phone_number or not password or not email:
        messagebox.showerror("Error", "All fields are required")
        return False

    if password != confirm_password_entry.get():
        messagebox.showerror("Error", "Passwords do not match")
        return False

    if not terms_var.get():
        messagebox.showerror("Error", "You must agree to the terms and conditions")
        return False

    # Save the details in the database
    try:
        cursor.execute("INSERT INTO users (first_name, last_name, phone_number, password, email) VALUES (?, ?, ?, ?, ?)",
                       (first_name, last_name, phone_number, password, email))
        conn.commit()
        messagebox.showinfo("Success", "Account created successfully!")
        return True
    except sqlite3.IntegrityError:
        messagebox.showerror("Error", "Email already exists")
        return False

# Function to handle sign-up button click
def sign_up():
    first_name = first_name_entry.get()
    last_name = last_name_entry.get()
    phone_number = phone_number_entry.get()
    password = password_entry.get()
    email = email_entry.get()

    if save_user_details(first_name, last_name, phone_number, password, email):
        switch_to_login()

# Function to switch to login page
def switch_to_login():
    for widget in root.winfo_children():
        widget.destroy()
    login_window()

# Function to handle login
def login():
    phone_email = phone_email_entry.get()
    password = password_entry.get()

    if not phone_email or not password:
        messagebox.showerror("Error", "All fields are required")
        return

    # Check if the user exists
    cursor.execute("SELECT first_name FROM users WHERE (phone_number=? OR email=?) AND password=?",
                   (phone_email_entry.get(), phone_email_entry.get(), password_entry.get()))
    user = cursor.fetchone()
    if user:
        messagebox.showinfo("Success", f"Welcome, {user[0]}!")
        show_dashboard()  # Transition to the dashboard page
    else:
        messagebox.showerror("Error", "Credentials do not match")


# Create the login window
def login_window():
    root.title("Fusion Bazaar (Login)")
    
    # Custom fonts
    title_font = font.Font(family="Helvetica", size=16, weight="bold")
    button_font = font.Font(family="Helvetica", size=10, weight="bold")
    
    # Load and resize the image
    image = Image.open(r"C:\Users\Acer\Downloads\pic (1).png")
    image = image.resize((600, 500), Image.LANCZOS)
    photo = ImageTk.PhotoImage(image)
    
    # Image label
    image_label = tk.Label(root, image=photo)
    image_label.photo = photo  # Prevent garbage collection
    image_label.pack(side="left", padx=20, pady=20)
    
    # Right frame for login form
    right_frame = tk.Frame(root)
    right_frame.pack(side="right", padx=20, pady=20)
    
    # Title
    title = tk.Label(right_frame, text="Welcome to FUSION BAZAAR! Please login.", font=title_font)
    title.grid(row=0, column=0, columnspan=2, pady=10)
    
    # Phone Number / Email label and entry
    global phone_email_entry, password_entry
    phone_email_label = tk.Label(right_frame, text="Phone Number / Email:")
    phone_email_label.grid(row=1, column=0, sticky="e", pady=5)
    phone_email_entry = tk.Entry(right_frame, width=30)
    phone_email_entry.grid(row=1, column=1, pady=5)
    
    # Password label and entry
    password_label = tk.Label(right_frame, text="Password:")
    password_label.grid(row=2, column=0, sticky="e", pady=5)
    password_entry = tk.Entry(right_frame, show='*', width=30)
    password_entry.grid(row=2, column=1, pady=5)
    
    # Forgot Password link
    forgot_password_link = tk.Label(right_frame, text="Forgot Password?", fg="blue", cursor="hand2")
    forgot_password_link.grid(row=3, column=1, sticky="w", pady=5)
    forgot_password_link.bind("<Button-1>", lambda e: print("Forgot Password Clicked"))
    
    # Login button
    login_button = tk.Button(right_frame, text="LOGIN", font=button_font, command=login, bg="#d0a9f5")
    login_button.grid(row=4, column=0, columnspan=2, pady=10)
    
    # Sign-up link
    sign_up_label = tk.Label(right_frame, text="Don't have an Account?", fg="black")
    sign_up_label.grid(row=5, column=0, pady=5)
    sign_up_link = tk.Label(right_frame, text="Sign up", fg="orange", cursor="hand2")
    sign_up_link.grid(row=5, column=1, sticky="w", pady=5)
    sign_up_link.bind("<Button-1>", lambda e: switch_to_signup())

# Function to switch to sign-up page
def switch_to_signup():
    for widget in root.winfo_children():
        widget.destroy()
    sign_up_window()

# Main window (Sign-up)
def sign_up_window():
    root.title("Fusion Bazaar (Sign up)")

    # Custom fonts
    title_font = font.Font(family="Helvetica", size=16, weight="bold")
    button_font = font.Font(family="Helvetica", size=10, weight="bold")

    # Load and resize the image
    image = Image.open(r"C:\Users\Acer\Downloads\pic2.png")
    image = image.resize((600, 500), Image.LANCZOS)
    photo = ImageTk.PhotoImage(image)

    # Image label
    image_label = tk.Label(root, image=photo)
    image_label.photo = photo  # Prevent garbage collection
    image_label.pack(side="left", padx=20, pady=20)

    # Right frame for sign-up form
    right_frame = tk.Frame(root)
    right_frame.pack(side="right", padx=20, pady=20)

    # Title
    title = tk.Label(right_frame, text="Create Your Account Here", font=title_font)
    title.grid(row=0, column=0, columnspan=2, pady=10)

    # First name label and entry
    global first_name_entry, last_name_entry, phone_number_entry, password_entry, confirm_password_entry, email_entry, terms_var
    first_name_label = tk.Label(right_frame, text="First name")
    first_name_label.grid(row=1, column=0, sticky="e", pady=5)
    first_name_entry = tk.Entry(right_frame, width=30)
    first_name_entry.grid(row=1, column=1, pady=5)

    # Last name label and entry
    last_name_label = tk.Label(right_frame, text="Last Name")
    last_name_label.grid(row=2, column=0, sticky="e", pady=5)
    last_name_entry = tk.Entry(right_frame, width=30)
    last_name_entry.grid(row=2, column=1, pady=5)

    # Phone Number label and entry
    phone_number_label = tk.Label(right_frame, text="Phone Number")
    phone_number_label.grid(row=3, column=0, sticky="e", pady=5)
    phone_number_entry = tk.Entry(right_frame, width=30)
    phone_number_entry.grid(row=3, column=1, pady=5)

    # Password label and entry
    password_label = tk.Label(right_frame, text="Password")
    password_label.grid(row=4, column=0, sticky="e", pady=5)
    password_entry = tk.Entry(right_frame, show='*', width=30)
    password_entry.grid(row=4, column=1, pady=5)

    # Confirm Password label and entry
    confirm_password_label = tk.Label(right_frame, text="Confirm Password")
    confirm_password_label.grid(row=5, column=0, sticky="e", pady=5)
    confirm_password_entry = tk.Entry(right_frame, show='*', width=30)
    confirm_password_entry.grid(row=5, column=1, pady=5)

    # Email label and entry
    email_label = tk.Label(right_frame, text="Email")
    email_label.grid(row=6, column=0, sticky="e", pady=5)
    email_entry = tk.Entry(right_frame, width=30)
    email_entry.grid(row=6, column=1, pady=5)

    # Terms and conditions checkbox
    terms_var = IntVar()
    terms_check = Checkbutton(right_frame, text="I agree to Fusion Bazaar Term's and conditions and privacy Policy.", variable=terms_var)
    terms_check.grid(row=7, column=0, columnspan=2, pady=5)

    # Sign-up button
    signup_button = tk.Button(right_frame, text="SIGN UP", font=button_font, command=sign_up, bg="#d0a9f5")
    signup_button.grid(row=8, column=0, columnspan=2, pady=10)

    # Login link
    login_label = tk.Label(right_frame, text="Already have an account?", fg="black")
    login_label.grid(row=9, column=0, pady=5)
    login_link = tk.Label(right_frame, text="Login", fg="orange", cursor="hand2")
    login_link.grid(row=9, column=1, sticky="w", pady=5)
    login_link.bind("<Button-1>", lambda e: switch_to_login())

# Modified show_dashboard function
cart = []

def add_to_cart(item_info):
    cart.append(item_info)
    messagebox.showinfo("Cart", f"{item_info['title']} added to cart!")

def show_dashboard():
    # Clear the current window
    for widget in root.winfo_children():
        widget.destroy()

    # Setup the dashboard page
    root.title("Fusion Bazaar (Dashboard)")
    root.geometry("1024x768")

    # Create a frame for the search bar
    e = tk.Entry(root, width=200, bg='darkorchid4', font=("Arial", 25))
    e.pack()

    e1 = tk.Label(e, text='search', width=30, font=("Arial", 12))
    e1.place(x=600, y=8)

    cart_button = tk.Button(root, text="Cart", font=("Helvetica", 12, "bold"), bg="purple", fg="white", command=open_cart)
    cart_button.place(x=700, y=700)

    images_info = [
        {"image_path": r"C:\Users\Acer\Downloads\image (9).jpg", "title": "Paracetamol", "price": "Rs 30", "description": "Effective pain reliever and fever reducer."},
        {"image_path": r"C:\Users\Acer\Downloads\image (11).jpg", "title": "Hooded Jacket", "price": "Rs 2,000", "description": "Stylish and warm jacket for winter."},
        {"image_path": r"C:\Users\Acer\Downloads\image (12).jpg", "title": "Apple Watch", "price": "Rs 80,000", "description": "Smartwatch with advanced health features."},
        {"image_path": r"C:\Users\Acer\Downloads\image (13).jpg", "title": "Gloves", "price": "Rs 30", "description": "Durable gloves for daily use."},
        {"image_path": r"C:\Users\Acer\Downloads\image (14).jpg", "title": "Fresh Mix Vegetable", "price": "Rs 350", "description": "Healthy and fresh mixed vegetables."},
        {"image_path": r"C:\Users\Acer\Downloads\image (15).jpg", "title": "Blender", "price": "Rs 2,000", "description": "High-speed blender for smooth blends."},
        {"image_path": r"C:\Users\Acer\Downloads\image (5).png", "title": "Samsung Zfold", "price": "Rs 1,50,000", "description": "Folding smartphone with advanced features."},
        {"image_path": r"C:\Users\Acer\Downloads\image (16).jpg", "title": "Multiplug", "price": "Rs 1,100", "description": "Convenient multiplug for multiple devices."}
    ]

    # Define position mapping
    position_mapping = {
        "Apple Watch": (100, 200),
        "Samsung Zfold": (1200, 100),
        "Hooded Jacket": (600, 100),
        "Blender": (300, 400),
        "Gloves": (1000, 400),
        "Multiplug": (800, 600),
        "Fresh Mix Vegetable": (500, 300),
        "Paracetamol": (200, 600)
    }

   
    root.image_references = []
    for idx, image_info in enumerate(images_info):
        image = Image.open(image_info["image_path"])
        resized_image = image.resize((200, 150))
        converted_image = ImageTk.PhotoImage(resized_image)
        root.image_references.append(converted_image)

        # Get coordinates from the position mapping
        x, y = position_mapping.get(image_info["title"], (100 + (idx % 3) * 300, 100 + (idx // 3) * 250))

        # Create image label
        img_label = tk.Label(root, image=converted_image, cursor="hand2")
        img_label.place(x=x, y=y)

        # Debugging: print the coordinates to verify
        print(f"Placing '{image_info['title']}' at ({x}, {y})")

        # Bind click event
        img_label.bind("<Button-1>", lambda e, info=image_info: open_product_page(info))

        # Add text below the image
        text_label = tk.Label(root, text=f"{image_info['title']}\n{image_info['price']}", font=('Arial', 12))
        text_label.place(x=x + 20, y=y + 160)  # Adjust x and y to position text below the image

# Function to open product page
def open_product_page(product_info):
    product_window = tk.Toplevel(root)
    product_window.title("Fusion Bazaar - Product Page")
    product_window.geometry("1200x800")
    product_window.configure(bg="#f0f0f0")

    # Custom fonts
    title_font = font.Font(family="Helvetica", size=24, weight="bold")
    price_font = font.Font(family="Helvetica", size=18)
    description_font = font.Font(family="Helvetica", size=10)
    button_font = font.Font(family="Helvetica", size=12, weight="bold")

    # Back Button
    back_button = tk.Button(product_window, text="← Back", font=description_font, bg="#f0f0f0", fg="purple", borderwidth=0, command=product_window.destroy)
    back_button.grid(row=0, column=0, padx=10, pady=10, sticky="w")

    # Load and display the product image
    product_image = Image.open(product_info["image_path"])
    product_image = product_image.resize((300, 300), Image.LANCZOS)
    product_image_tk = ImageTk.PhotoImage(product_image)

    product_image_label = tk.Label(product_window, image=product_image_tk, bg="#f0f0f0")
    product_image_label.grid(row=1, column=0, rowspan=3, padx=20, pady=10)
    product_image_label.image = product_image_tk  # Keep a reference

    # Product Title
    title_label = tk.Label(product_window, text=product_info["title"], font=title_font, bg="#f0f0f0", fg="black")
    title_label.grid(row=1, column=1, sticky="w")

    # Price
    price_label = tk.Label(product_window, text=product_info["price"], font=price_font, bg="#f0f0f0", fg="black")
    price_label.grid(row=2, column=1, sticky="w")

    # Product Description
    description_label = tk.Label(product_window, text=product_info["description"], font=description_font, bg="#f0f0f0", fg="black", justify="left", wraplength=500)
    description_label.grid(row=3, column=1, padx=20, pady=10, sticky="w")

    # Add to Cart and Shop buttons
    button_frame = tk.Frame(product_window, bg="#f0f0f0")
    button_frame.grid(row=4, column=1, padx=20, pady=20, sticky="w")

    add_to_cart_button = tk.Button(button_frame, text="Add to Cart", font=button_font, bg="purple", fg="white", width=12, command=lambda: add_to_cart(product_info))
    add_to_cart_button.grid(row=0, column=0, padx=5)

    shop_button = tk.Button(button_frame, text="Shop", font=button_font, bg="purple", fg="white", width=12, command=open_payment_page)
    shop_button.grid(row=0, column=1, padx=5)

    # Delivery and Service Section
    delivery_frame = tk.Frame(product_window, bg="#f0f0f0")
    delivery_frame.grid(row=1, column=2, rowspan=3, padx=20, pady=10, sticky="nw")

    delivery_label = tk.Label(delivery_frame, text="Delivery\n- Free standard shipping\n- Expedited shipping available\n- Pick up in store options",
                              font=description_font, bg="#f0f0f0", fg="black", justify="left")
    delivery_label.pack(anchor="w")

    service_label = tk.Label(delivery_frame, text="Service\n\n15 days free & easy return\nChange of mind is not applicable\n\nWarranty not available",
                             font=description_font, bg="#f0f0f0", fg="black", justify="left")
    service_label.pack(anchor="w", pady=20)

def open_cart():
    cart_window = tk.Toplevel(root)
    cart_window.title("Fusion Bazaar - Your Cart")
    cart_window.geometry("800x600")
    cart_window.configure(bg="#f0f0f0")

    cart_label = tk.Label(cart_window, text="Your Cart", font=("Helvetica", 24, "bold"), bg="#f0f0f0", fg="black")
    cart_label.pack(pady=10)

    if not cart:
        empty_label = tk.Label(cart_window, text="Your cart is empty.", font=("Helvetica", 16), bg="#f0f0f0", fg="black")
        empty_label.pack(pady=20)
    else:
        for item in cart:
            item_frame = tk.Frame(cart_window, bg="#f0f0f0")
            item_frame.pack(pady=5, padx=10, fill="x")

            image = Image.open(item["image_path"])
            resized_image = image.resize((100, 75))
            converted_image = ImageTk.PhotoImage(resized_image)

            image_label = tk.Label(item_frame, image=converted_image, bg="#f0f0f0")
            image_label.image = converted_image
            image_label.pack(side="left")

            text_label = tk.Label(item_frame, text=f"{item['title']}\n{item['price']}", font=("Helvetica", 14), bg="#f0f0f0", fg="black")
            text_label.pack(side="left", padx=10)

            remove_button = tk.Button(item_frame, text="Remove", command=lambda item=item: remove_from_cart(item))
            remove_button.pack(side="right")

def remove_from_cart(item):
    if item in cart:
        cart.remove(item)
        open_cart()  # Refresh the cart window



def process_save(province, city, zone, address):
    if not province or not city or not zone or not address:
        messagebox.showwarning("Input Error", "All fields are required!")
    else:
        # Example payment processing (placeholder function)
        messagebox.showinfo("Payment", "Payment processed successfully!")
        # Add further logic here to handle the payment process and update the order status

def open_shipping_page():
    shipping_window = tk.Toplevel(root)
    shipping_window.title("Fusion Bazaar - Shipping Details")
    shipping_window.geometry("400x250")
    shipping_window.configure(bg="#f0f0f0")

    # Custom fonts
    title_font = font.Font(family="Helvetica", size=20, weight="bold")
    label_font = font.Font(family="Helvetica", size=12)
    button_font = font.Font(family="Helvetica", size=10, weight="bold")

    # Title
    title_label = tk.Label(shipping_window, text="Shipping details", font=title_font, bg="#f0f0f0", fg="gray")
    title_label.pack(pady=10)

    # Create a frame for the shipping form
    form_frame = tk.Frame(shipping_window, bg="#f0f0f0")
    form_frame.pack(padx=20, pady=10, fill="both", expand=True)

    # Labels and entries
    tk.Label(form_frame, text="Province", font=label_font, bg="#f0f0f0").grid(row=0, column=0, sticky="w", pady=5)
    tk.Entry(form_frame, font=label_font).grid(row=0, column=1, pady=5)

    tk.Label(form_frame, text="City", font=label_font, bg="#f0f0f0").grid(row=1, column=0, sticky="w", pady=5)
    tk.Entry(form_frame, font=label_font).grid(row=1, column=1, pady=5)

    tk.Label(form_frame, text="Zone", font=label_font, bg="#f0f0f0").grid(row=2, column=0, sticky="w", pady=5)
    tk.Entry(form_frame, font=label_font).grid(row=2, column=1, pady=5)

    tk.Label(form_frame, text="Address", font=label_font, bg="#f0f0f0").grid(row=3, column=0, sticky="w", pady=5)
    tk.Entry(form_frame, font=label_font).grid(row=3, column=1, pady=5)

    # Save button
    save_button = tk.Button(shipping_window, text="Save", font=button_font, bg="purple", fg="white",command=process_save)
    save_button.pack(pady=10)



def process_save(province, city, zone, address):
    if not province or not city or not zone or not address:
        messagebox.showwarning("Input Error", "All fields are required!")
    else:
        # Example payment processing (placeholder function)
        messagebox.showinfo("Payment", "Payment processed successfully!")
        # Add further logic here to handle the payment process and update the order status

def open_shipping_page():
    shipping_window = tk.Toplevel(root)
    shipping_window.title("Fusion Bazaar - Shipping Details")
    shipping_window.geometry("400x250")
    shipping_window.configure(bg="#f0f0f0")

    # Custom fonts
    title_font = font.Font(family="Helvetica", size=20, weight="bold")
    label_font = font.Font(family="Helvetica", size=12)
    button_font = font.Font(family="Helvetica", size=10, weight="bold")

    # Title
    title_label = tk.Label(shipping_window, text="Shipping details", font=title_font, bg="#f0f0f0", fg="gray")
    title_label.pack(pady=10)

    # Create a frame for the shipping form
    form_frame = tk.Frame(shipping_window, bg="#f0f0f0")
    form_frame.pack(padx=20, pady=10, fill="both", expand=True)

    # Labels and entries
    tk.Label(form_frame, text="Province", font=label_font, bg="#f0f0f0").grid(row=0, column=0, sticky="w", pady=5)
    province_entry = tk.Entry(form_frame, font=label_font)
    province_entry.grid(row=0, column=1, pady=5)

    tk.Label(form_frame, text="City", font=label_font, bg="#f0f0f0").grid(row=1, column=0, sticky="w", pady=5)
    city_entry = tk.Entry(form_frame, font=label_font)
    city_entry.grid(row=1, column=1, pady=5)

    tk.Label(form_frame, text="Zone", font=label_font, bg="#f0f0f0").grid(row=2, column=0, sticky="w", pady=5)
    zone_entry = tk.Entry(form_frame, font=label_font)
    zone_entry.grid(row=2, column=1, pady=5)

    tk.Label(form_frame, text="Address", font=label_font, bg="#f0f0f0").grid(row=3, column=0, sticky="w", pady=5)
    address_entry = tk.Entry(form_frame, font=label_font)
    address_entry.grid(row=3, column=1, pady=5)

    # Save button with validation
    save_button = tk.Button(shipping_window, text="Save", font=button_font, bg="purple", fg="white",
                            command=lambda: process_save(province_entry.get(), city_entry.get(), zone_entry.get(), address_entry.get()))
    save_button.pack(pady=10)

def shipping_page_and_process_payment():
    open_shipping_page()

def open_payment_page():
    payment_window = tk.Toplevel(root)
    payment_window.title("Fusion Bazaar - Payment")
    payment_window.geometry("800x400")
    payment_window.configure(bg="#f0f0f0")

    # Custom fonts
    title_font = font.Font(family="Helvetica", size=24, weight="bold")
    label_font = font.Font(family="Helvetica", size=14)
    button_font = font.Font(family="Helvetica", size=12, weight="bold")

    # Title
    title_label = tk.Label(payment_window, text="Payment Details", font=title_font, bg="#f0f0f0", fg="black")
    title_label.pack(pady=10)

    # Create a frame for the payment form
    form_frame = tk.Frame(payment_window, bg="#f0f0f0")
    form_frame.pack(side="left", padx=20, pady=20, fill="both", expand=True)

    banking_label = tk.Label(form_frame, font=label_font, bg="#f0f0f0", fg="black")
    banking_label.grid(row=0, column=0, sticky="e", pady=5)
    banking_check = tk.Checkbutton(form_frame, text="Online Banking", font=40, bg="#f0f0f0")
    banking_check.grid(row=0, column=1, pady=5)

    esewaa_label = tk.Label(form_frame, font=label_font, bg="#f0f0f0", fg="black")
    esewaa_label.grid(row=1, column=0, sticky="e", pady=5)
    esewaa_check = tk.Checkbutton(form_frame, text="Esewa", font=40, bg="#f0f0f0")
    esewaa_check.grid(row=1, column=1, pady=5)

    khaltee_label = tk.Label(form_frame, font=label_font, bg="#f0f0f0", fg="black")
    khaltee_label.grid(row=2, column=0, sticky="e", pady=5)
    khaltee_check = tk.Checkbutton(form_frame, text="Khalti", font=40, bg="#f0f0f0")
    khaltee_check.grid(row=2, column=1, pady=5)

    cid_label = tk.Label(form_frame, font=label_font, bg="#f0f0f0", fg="black")
    cid_label.grid(row=3, column=0, sticky="e", pady=5)
    cid_check = tk.Checkbutton(form_frame, text="Cash in hand", font=40, bg="#f0f0f0")
    cid_check.grid(row=3, column=1, pady=5)

    # Payment Button
    pay_button = tk.Button(payment_window, text="Pay Now", font=button_font, bg="purple", fg="white", command=shipping_page_and_process_payment)
    pay_button.pack(pady=20)

    # Create a frame for the QR code or scan option
    qr_frame = tk.Frame(payment_window, bg="#f0f0f0")
    qr_frame.pack(side="right", padx=10, pady=10, fill="both", expand=True)

    # Load and display QR code image (placeholder)
    qr_image = Image.open(r"C:\Users\Acer\Desktop\weeki.jpg")  # Update this path to your QR code image
    qr_image = qr_image.resize((150, 150), Image.LANCZOS)
    qr_image_tk = ImageTk.PhotoImage(qr_image)
    qr_image_label = tk.Label(qr_frame, image=qr_image_tk, bg="#f0f0f0")
    qr_image_label.pack()

    # Keep a reference to the QR image to prevent garbage collection
    qr_image_label.image = qr_image_tk

# Initialize and start the application
root = tk.Tk()
root.attributes('-fullscreen', True)
root.bind("<Escape>", lambda event: root.attributes("-fullscreen", False))

sign_up_window()

